from __future__ import annotations
from functools import wraps

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ParseMode

from sqlalchemy import select, func, text

from bot.config import settings
from bot.database.session import get_session
from bot.database.models import User, Homework


router = Router(name="admin")


def _is_admin(message: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return bool(message.from_user and message.from_user.id in settings.ADMIN_IDS)


def admin_required(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    @wraps(func)
    async def wrapper(message: Message, *args, **kwargs):
        if not _is_admin(message):
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        return await func(message, *args, **kwargs)
    return wrapper


@router.message(Command("broadcast"))
async def cmd_broadcast(message: Message) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>
    """
    if not _is_admin(message):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    text_parts = message.text.split(maxsplit=1)
    if len(text_parts) < 2:
        await message.answer(
            "üì¢ <b>–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/broadcast &lt;—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è&gt;</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/broadcast –í–∞–∂–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤!</code>",
            parse_mode="HTML"
        )
        return

    broadcast_text = text_parts[1]

    async for db in get_session():
        users = (await db.execute(select(User).where(User.telegram_id.is_not(None)))).scalars().all()

        success_count = 0
        error_count = 0

        status_message = await message.answer("üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")

        for user in users:
            try:
                await message.bot.send_message(user.telegram_id, broadcast_text)
                success_count += 1
            except Exception:
                error_count += 1

        result_text = (
            f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n"
            f"üìà –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}"
        )

        await status_message.edit_text(result_text, parse_mode="HTML")


@router.message(Command("stats"))
async def cmd_stats(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"""
    if not _is_admin(message):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    async for db in get_session():
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
        users_count = (await db.execute(select(func.count()).select_from(User))).scalar_one()
        active_users = (await db.execute(
            select(func.count()).select_from(User).where(User.telegram_id.is_not(None))
        )).scalar_one()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
        total_homeworks = (await db.execute(select(func.count()).select_from(Homework))).scalar_one()
        active_homeworks = (await db.execute(
            select(func.count()).select_from(Homework).where(
                Homework.is_done.is_(False),
                Homework.is_archived.is_(False)
            )
        )).scalar_one()
        completed_homeworks = (await db.execute(
            select(func.count()).select_from(Homework).where(Homework.is_done.is_(True))
        )).scalar_one()
        archived_homeworks = (await db.execute(
            select(func.count()).select_from(Homework).where(Homework.is_archived.is_(True))
        )).scalar_one()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        from bot.database.models import ScheduleLesson
        schedule_lessons = (await db.execute(select(func.count()).select_from(ScheduleLesson))).scalar_one()

        stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ SDU Homework Bot</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {users_count}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö (—Å Telegram ID): {active_users}

üìù <b>–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {total_homeworks}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_homeworks}
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_homeworks}
‚Ä¢ –í –∞—Ä—Ö–∏–≤–µ: {archived_homeworks}

üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π –≤ –±–∞–∑–µ: {schedule_lessons}

üîß <b>–°–∏—Å—Ç–µ–º–∞:</b>
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –ê–∫—Ç–∏–≤–µ–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–π —á–∞—Å –≤ XX:15)
‚Ä¢ –ê—Ä—Ö–∏–≤–∞—Ü–∏—è: –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –≤ 02:00
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: 20:00 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
"""

        await message.answer(stats_text, parse_mode="HTML")


@router.message(Command("thn"))
async def cmd_test_homework_now(message: Message) -> None:
    """
    Test Homework Now - —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    –°–∏–º—É–ª–∏—Ä—É–µ—Ç –æ–∫–æ–Ω—á–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    if not _is_admin(message):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æÔøΩÔøΩ –∫–æ–º–∞–Ω–¥—ã")
        return

    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    from bot.services.reminder_after_lesson import unified_lesson_check

    await message.answer("üß™ <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n–ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫–∏...", parse_mode="HTML")

    # 1. –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"dz:test:yes"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"dz:test:no"),
            ]
        ]
    )

    await message.answer(
        "üß™ <b>–¢–ï–°–¢:</b> –ó–∞–Ω—è—Ç–∏–µ 'TEST101 (–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞) - T123' —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è (—á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç).\n\n"
        "üìù –ë—ã–ª–æ –ª–∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ?",
        reply_markup=kb,
        parse_mode="HTML"
    )

    # 2. –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    try:
        await unified_lesson_check(message.bot)
        await message.answer("‚úÖ <b>–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:</b> –§—É–Ω–∫—Ü–∏—è unified_lesson_check –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µÔøΩÔøΩ–Ω–æ", parse_mode="HTML")
    except Exception as e:
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:</b> {str(e)}", parse_mode="HTML")


@router.message(Command("sql"))
async def sql_for_admins(message: Message) -> None:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    if not _is_admin(message):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º SQL-–∑–∞–ø—Ä–æ—Å –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    text_parts = message.text.split(maxsplit=1)
    if len(text_parts) < 2:
        await message.answer(
            "üíæ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/sql &lt;SQL-–∑–∞–ø—Ä–æ—Å&gt;</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "<code>/sql SELECT * FROM users LIMIT 5</code>\n"
            "<code>/sql SELECT COUNT(*) FROM homeworks</code>",
            parse_mode="HTML"
        )
        return

    query = text_parts[1].strip()

    async for db in get_session():
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å
            result = await db.execute(text(query))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if query.upper().strip().startswith('SELECT'):
                # –î–ª—è SELECT-–∑–∞–ø—Ä–æ—Å–æ–≤
                rows = result.fetchall()

                if not rows:
                    await message.answer("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µÔøΩÔøΩ–æ.")
                    return

                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
                headers = list(result.keys())

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
                table = "| " + " | ".join(headers) + " |\n"
                table += "|" + "|".join(["---" for _ in headers]) + "|\n"

                for row in rows:
                    row_data = [str(cell) if cell is not None else "NULL" for cell in row]
                    table += "| " + " | ".join(row_data) + " |\n"

                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
                special_chars = [
                    ('\\', '\\\\'),
                    ('*', '\\*'),
                    ('_', '\\_'),
                    ('[', '\\['),
                    (']', '\\]'),
                    ('(', '\\('),
                    (')', '\\)'),
                    ('~', '\\~'),
                    ('|', '\\|'),
                    ('-', '\\-'),
                    ('.', '\\.'),
                    ('>', '\\>')  # –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ >
                ]

                for char, replacement in special_chars:
                    table = table.replace(char, replacement)

                # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è
                max_length = 4096
                if len(table) > max_length:
                    parts = []
                    while len(table) > max_length:
                        part = table[:max_length]
                        parts.append(part)
                        table = table[max_length:]

                    if table:
                        parts.append(table)

                    for i, part in enumerate(parts):
                        await message.answer(
                            f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç SQL-–∑–∞–ø—Ä–æ—Å–∞ (—á–∞—Å—Ç—å {i+1}/{len(parts)}):</b>\n\n"
                            f"```\n{part}\n```",
                            parse_mode=ParseMode.MARKDOWN_V2
                        )
                else:
                    await message.answer(
                        f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç SQL-–∑–∞–ø—Ä–æ—Å–∞:</b>\n\n"
                        f"```\n{table}\n```",
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
            else:
                # –î–ª—è INSERT, UPDATE, DELETE –∑–∞–ø—Ä–æ—Å–æ–≤
                await db.commit()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                await message.answer(f"‚úÖ <b>SQL-–∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ</b>\n\n–ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å—Ç—Ä–æ–∫: {result.rowcount}", parse_mode="HTML")

        except Exception as e:
            await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:</b>\n\n<code>{str(e)}</code>", parse_mode="HTML")


@router.message(Command("help_admin"))
async def cmd_admin_help(message: Message) -> None:
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω—Å–∫–∏–º –∫–æ–º–∞–Ω–¥–∞–º"""
    if not _is_admin(message):
        return

    admin_help = """
üëë <b>–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</b>

üì¢ <b>/broadcast</b> &lt;—Ç–µ–∫—Å—Ç&gt; - –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
   –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞
   
üìä <b>/stats</b> - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–¥–∞–Ω–∏–π, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
   
üß™ <b>/thn</b> - –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
   –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö

üíæ <b>/sql</b> &lt;–∑–∞–ø—Ä–æ—Å&gt; - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
   –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   
üîß <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∂–¥—ã–π —á–∞—Å –≤ XX:15
‚Ä¢ –ê—Ä—Ö–∏–≤–∞—Ü–∏—è: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 02:00
‚Ä¢ –í–µ—á–µ—Ä–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ 20:00

‚ÑπÔ∏è <b>/help_admin</b> - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
"""

    await message.answer(admin_help, parse_mode="HTML")
