from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.database.session import get_session
from bot.database.models import User, Homework
from bot.services.homeworks import get_homeworks, update_homework_status, add_homework


class HomeworkState(StatesGroup):
    collecting_homework = State()


router = Router(name="homeworks")


def _format_deadline(hw: Homework) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    from datetime import datetime

    # –ï—Å–ª–∏ –µ—Å—Ç—å —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–¥–ª–∞–π–Ω
    if hw.deadline:
        return hw.deadline.strftime("%d.%m.%Y %H:%M")

    # –ï—Å–ª–∏ –¥–æ–º–∞—à–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —É—Ä–æ–∫–æ–º, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞
    if hw.lesson:
        now = datetime.now()
        current_weekday = now.isoweekday()  # 1=Monday, 7=Sunday

        lesson_day = hw.lesson.day_of_week  # 1-6 (Mon-Sat)
        lesson_start_time = hw.lesson.start_time

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞
        days_until = (lesson_day - current_weekday) % 7
        if days_until == 0:
            # –°–µ–≥–æ–¥–Ω—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
            lesson_time = datetime.strptime(lesson_start_time, "%H:%M").time()
            lesson_datetime = now.replace(hour=lesson_time.hour, minute=lesson_time.minute, second=0, microsecond=0)
            if lesson_datetime <= now:
                days_until = 7  # –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è

        if days_until == 0:
            return f"–°–µ–≥–æ–¥–Ω—è –∫ {lesson_start_time}"
        elif days_until == 1:
            return f"–ó–∞–≤—Ç—Ä–∞ –∫ {lesson_start_time}"
        else:
            return f"–ß–µ—Ä–µ–∑ {days_until} –¥–Ω. –∫ {lesson_start_time}"

    # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –¥–µ–¥–ª–∞–π–Ω–∞, –Ω–∏ —É—Ä–æ–∫–∞
    return "–ù–µ —É–∫–∞–∑–∞–Ω"


@router.message(Command("homeworks"))
async def list_homeworks(message: Message) -> None:
    async for db in get_session():
        # find user by telegram id
        from sqlalchemy import select
        from bot.database.models import ScheduleLesson

        res = await db.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = res.scalar_one_or_none()

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        if not user:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ telegram_id —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            # –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            schedule_check = await db.execute(
                select(ScheduleLesson).limit(1)
            )
            has_any_schedule = schedule_check.scalar_one_or_none()

            if has_any_schedule:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
                temp_user = User(
                    telegram_id=message.from_user.id,
                    username=f"temp_user_{message.from_user.id}",
                    password="temp"
                )
                db.add(temp_user)
                await db.commit()
                await db.refresh(temp_user)
                user = temp_user
            else:
                await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /login")
                return

        items = await get_homeworks(db, user_id=user.id, only_active=True)  # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ
        if not items:
            await message.answer("–ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤
        from bot.database.models import ScheduleLesson
        from datetime import datetime

        now = datetime.now()
        current_weekday = now.isoweekday()  # 1=Monday, 7=Sunday

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        schedule_lessons = (await db.execute(
            select(ScheduleLesson).where(ScheduleLesson.user_id == user.id)
        )).scalars().all()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        kb_rows = []

        for h in items:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–µ–¥–ª–∞–π–Ω –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞
            deadline_text = "‚Äî"
            if h.lesson:
                # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
                lesson_day = h.lesson.day_of_week  # 1-6 (Mon-Sat)
                lesson_start_time = h.lesson.start_time

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞
                days_until = (lesson_day - current_weekday) % 7
                if days_until == 0:
                    # –°–µ–≥–æ–¥–Ω—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
                    lesson_time = datetime.strptime(lesson_start_time, "%H:%M").time()
                    lesson_datetime = now.replace(hour=lesson_time.hour, minute=lesson_time.minute, second=0, microsecond=0)
                    if lesson_datetime <= now:
                        days_until = 7  # –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è

                if days_until == 0:
                    deadline_text = "–°–µ–≥–æ–¥–Ω—è"
                elif days_until == 1:
                    deadline_text = "–ó–∞–≤—Ç—Ä–∞"
                else:
                    deadline_text = f"–ß–µ—Ä–µ–∑ {days_until} –¥–Ω."

            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Ä–æ–∫–µ –∏ –¥–µ–¥–ª–∞–π–Ω–µ
            lesson_info = ""
            if h.lesson:
                lesson_info = f"{h.lesson.course_code or h.lesson.title or '–£—Ä–æ–∫'} ‚Ä¢ "

            button_text = f"üìù {lesson_info}{h.subject}"
            if deadline_text != "‚Äî":
                button_text += f" ({deadline_text})"

            kb_rows.append([InlineKeyboardButton(text=button_text, callback_data=f"hw:{h.id}")])

        kb = InlineKeyboardMarkup(inline_keyboard=kb_rows)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        active_count = len(items)
        stats_text = f"üìù –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {active_count}"

        await message.answer(f"–í–∞—à–∏ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n\n{stats_text}", reply_markup=kb)


@router.callback_query(F.data.startswith("hw:"))
async def hw_detail(cb: CallbackQuery) -> None:
    hw_id = int(cb.data.split(":", 1)[1])
    async for db in get_session():
        from sqlalchemy import select
        from sqlalchemy.orm import joinedload

        # –Ø–≤–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã —Å homework –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º unique() –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        res = await db.execute(
            select(Homework)
            .options(joinedload(Homework.media))
            .where(Homework.id == hw_id)
        )
        hw = res.unique().scalar_one_or_none()
        if not hw:
            await cb.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        text = (
            f"<b>{hw.subject}</b>\n"
            f"{hw.description}\n\n"
            f"–î–µ–¥–ª–∞–π–Ω: {_format_deadline(hw)}\n"
            f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ' if hw.is_done else '‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ'}"
        )

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –°–¥–µ–ª–∞–Ω–æ" if not hw.is_done else "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"hwdone:{hw.id}:{0 if not hw.is_done else 1}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="hwback")],
        ])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        current_is_photo = bool(cb.message.photo)
        current_is_video = bool(cb.message.video)
        current_is_document = bool(cb.message.document)
        current_is_text = not (current_is_photo or current_is_video or current_is_document)

        # –ï—Å–ª–∏ —É –¥–æ–º–∞—à–∫–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
        if hw.media:
            media_file = hw.media[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –º–µ–¥–∏–∞—Ñ–∞–π–ª

            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞ —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞ - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º caption
            if ((current_is_photo and media_file.file_type == "photo") or
                (current_is_video and media_file.file_type == "video") or
                (current_is_document and media_file.file_type == "document")):
                try:
                    await cb.message.edit_caption(caption=text, reply_markup=kb, parse_mode="HTML")
                    await cb.answer()
                    return
                except Exception:
                    pass

            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞ –º–µ–¥–∏–∞ - —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                await cb.message.delete()
            except Exception:
                pass

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                if media_file.file_type == "photo":
                    await cb.message.answer_photo(media_file.file_id, caption=text, reply_markup=kb, parse_mode="HTML")
                elif media_file.file_type == "video":
                    await cb.message.answer_video(media_file.file_id, caption=text, reply_markup=kb, parse_mode="HTML")
                elif media_file.file_type == "document":
                    await cb.message.answer_document(media_file.file_id, caption=text, reply_markup=kb, parse_mode="HTML")
            except Exception:
                # –ï—Å–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await cb.message.answer(f"{text}\n\n‚ö†Ô∏è –ú–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", reply_markup=kb, parse_mode="HTML")
        else:
            # –ï—Å–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç –∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
            if current_is_text:
                try:
                    await cb.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
                    await cb.answer()
                    return
                except Exception:
                    pass

            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–¥–∏–∞ - —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
            try:
                await cb.message.delete()
            except Exception:
                pass

            await cb.message.answer(text, reply_markup=kb, parse_mode="HTML")

        await cb.answer()


@router.callback_query(F.data == "hwback")
async def hw_back(cb: CallbackQuery) -> None:
    async for db in get_session():
        from sqlalchemy import select

        res = await db.execute(select(User).where(User.telegram_id == cb.from_user.id))
        user = res.scalar_one_or_none()

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ)
        if not user:
            from bot.database.models import ScheduleLesson
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ telegram_id —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            # –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            schedule_check = await db.execute(
                select(ScheduleLesson).limit(1)
            )
            has_any_schedule = schedule_check.scalar_one_or_none()

            if has_any_schedule:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
                temp_user = User(
                    telegram_id=cb.from_user.id,
                    username=f"temp_user_{cb.from_user.id}",
                    password="temp"
                )
                db.add(temp_user)
                await db.commit()
                await db.refresh(temp_user)
                user = temp_user
            else:
                await cb.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

        items = await get_homeworks(db, user_id=user.id, only_active=True)
        if not items:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
            current_is_text = not (cb.message.photo or cb.message.video or cb.message.document)

            if current_is_text:
                await cb.message.edit_text("–ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç.")
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
                try:
                    await cb.message.delete()
                    await cb.message.answer("–ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç.")
                except Exception:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º caption
                    await cb.message.edit_caption(caption="–ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç.")

            await cb.answer()
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ)
        from bot.database.models import ScheduleLesson
        from datetime import datetime

        now = datetime.now()
        current_weekday = now.isoweekday()  # 1=Monday, 7=Sunday

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        schedule_lessons = (await db.execute(
            select(ScheduleLesson).where(ScheduleLesson.user_id == user.id)
        )).scalars().all()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        kb_rows = []

        for h in items:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–µ–¥–ª–∞–π–Ω –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞
            deadline_text = "‚Äî"
            if h.lesson:
                # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
                lesson_day = h.lesson.day_of_week  # 1-6 (Mon-Sat)
                lesson_start_time = h.lesson.start_time

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞
                days_until = (lesson_day - current_weekday) % 7
                if days_until == 0:
                    # –°–µ–≥–æ–¥–Ω—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
                    lesson_time = datetime.strptime(lesson_start_time, "%H:%M").time()
                    lesson_datetime = now.replace(hour=lesson_time.hour, minute=lesson_time.minute, second=0, microsecond=0)
                    if lesson_datetime <= now:
                        days_until = 7  # –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è

                if days_until == 0:
                    deadline_text = "–°–µ–≥–æ–¥–Ω—è"
                elif days_until == 1:
                    deadline_text = "–ó–∞–≤—Ç—Ä–∞"
                else:
                    deadline_text = f"–ß–µ—Ä–µ–∑ {days_until} –¥–Ω."

            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Ä–æ–∫–µ –∏ –¥–µ–¥–ª–∞–π–Ω–µ
            lesson_info = ""
            if h.lesson:
                lesson_info = f"{h.lesson.course_code or h.lesson.title or '–£—Ä–æ–∫'} ‚Ä¢ "

            button_text = f"üìù {lesson_info}{h.subject}"
            if deadline_text != "‚Äî":
                button_text += f" ({deadline_text})"

            kb_rows.append([InlineKeyboardButton(text=button_text, callback_data=f"hw:{h.id}")])

        kb = InlineKeyboardMarkup(inline_keyboard=kb_rows)

        active_count = len(items)
        stats_text = f"üìù –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {active_count}"
        message_text = f"–í–∞—à–∏ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n\n{stats_text}"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
        current_is_text = not (cb.message.photo or cb.message.video or cb.message.document)

        if current_is_text:
            # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            await cb.message.edit_text(message_text, reply_markup=kb)
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ - —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
            try:
                await cb.message.delete()
                await cb.message.answer(message_text, reply_markup=kb)
            except Exception:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º caption
                await cb.message.edit_caption(caption=message_text, reply_markup=kb)

        await cb.answer()


@router.callback_query(F.data.startswith("hwdone:"))
async def hw_done(cb: CallbackQuery) -> None:
    _, hw_id_str, revert_str = cb.data.split(":")
    hw_id = int(hw_id_str)
    revert = revert_str == "1"
    async for db in get_session():
        await update_homework_status(db, homework_id=hw_id, is_done=not revert)
    await cb.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω")

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–º–∞—à–∫–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    await hw_detail(cb)


# Ask-after-lesson callbacks
@router.callback_query(F.data.startswith("dz:"))
async def after_lesson_prompt(cb: CallbackQuery, state: FSMContext) -> None:
    _, lesson_id, answer = cb.data.split(":")
    if answer == "no":
        await cb.answer("–û–∫, –¥–æ–º–∞—à–∫–∏ –Ω–µ—Ç")
        await cb.message.edit_text("‚ùå –î–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –±—ã–ª–æ", reply_markup=None)
        return

    # Answer is yes -> start collecting homework
    await state.set_state(HomeworkState.collecting_homework)
    await state.update_data(
        lesson_id=lesson_id,
        homework_data={
            "texts": [],
            "media": []
        }
    )

    await cb.message.edit_text(
        "‚úÖ –ï—Å—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ!\n\n"
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, —Ñ–∞–π–ª—ã –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è.\n"
        "üìå –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /done",
        reply_markup=None
    )
    await cb.answer("–ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è")


# –ö–æ–º–∞–Ω–¥–∞ /done –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ü–ï–†–ï–î –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —Ç–µ–∫—Å—Ç–∞
@router.message(Command("done"), HomeworkState.collecting_homework)
async def finish_homework_collection(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    homework_data = data.get("homework_data", {"texts": [], "media": []})
    lesson_id_str = data.get("lesson_id", "test")  # –ü–æ–ª—É—á–∞–µ–º lesson_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ
    if not homework_data["texts"] and not homework_data["media"]:
        await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞, –∑–∞—Ç–µ–º /done")
        return

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã
    description = "\n\n".join(homework_data["texts"]) if homework_data["texts"] else "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"
    subject = "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async for db in get_session():
        from sqlalchemy import select
        user = (await db.execute(select(User).where(User.telegram_id == message.from_user.id))).scalar_one_or_none()
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /login")
            await state.clear()
            return

        # –ï—Å–ª–∏ lesson_id –Ω–µ "test", –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —É—Ä–æ–∫ –∏ —Å–≤—è–∑–∞—Ç—å —Å –Ω–∏–º
        lesson_id = None
        calculated_deadline = None
        if lesson_id_str != "test":
            try:
                lesson_id = int(lesson_id_str)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ä–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                from bot.database.models import ScheduleLesson
                lesson = (await db.execute(
                    select(ScheduleLesson).where(
                        ScheduleLesson.id == lesson_id,
                        ScheduleLesson.user_id == user.id
                    )
                )).scalar_one_or_none()

                if lesson:
                    # –û–±–Ω–æ–≤–ª—è–µ–º subject –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É—Ä–æ–∫–∞
                    subject = f"{lesson.course_code or lesson.title or '–£—Ä–æ–∫'}"

                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–µ–¥–ª–∞–π–Ω –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞
                    from bot.services.homeworks import calculate_deadline_from_lesson
                    calculated_deadline = await calculate_deadline_from_lesson(db, lesson_id)
                else:
                    lesson_id = None
            except (ValueError, TypeError):
                lesson_id = None

        await add_homework(
            db,
            user_id=user.id,
            subject=subject,
            description=description,
            deadline=calculated_deadline,  # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –¥–µ–¥–ª–∞–π–Ω
            media_list=homework_data["media"],
            lesson_id=lesson_id  # –ü–µ—Ä–µ–¥–∞–µ–º lesson_id
        )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
    summary = f"‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!"
    if lesson_id:
        summary += f"\nüéì –°–≤—è–∑–∞–Ω–æ —Å —É—Ä–æ–∫–æ–º: {subject}"
        if calculated_deadline:
            summary += f"\n‚è∞ –î–µ–¥–ª–∞–π–Ω: {calculated_deadline.strftime('%d.%m.%Y %H:%M')}"
    summary += "\n\n"
    if homework_data["texts"]:
        summary += f"üìù –¢–µ–∫—Å—Ç–æ–≤: {len(homework_data['texts'])}\n"
    if homework_data["media"]:
        summary += f"üìé –§–∞–π–ª–æ–≤: {len(homework_data['media'])}\n"

    await message.answer(summary)
    await state.clear()


# Collect homework content when in state (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –ü–û–°–õ–ï –∫–æ–º–∞–Ω–¥—ã /done)
@router.message(HomeworkState.collecting_homework, F.text)
async def collect_homework_text(message: Message, state: FSMContext) -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    if message.text.startswith('/'):
        await message.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        return

    data = await state.get_data()
    homework_data = data.get("homework_data", {"texts": [], "media": []})

    homework_data["texts"].append(message.text)
    await state.update_data(homework_data=homework_data)

    await message.answer("‚úèÔ∏è –¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–ª–∏ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")


@router.message(HomeworkState.collecting_homework, F.photo)
async def collect_homework_photo(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    homework_data = data.get("homework_data", {"texts": [], "media": []})

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    homework_data["media"].append(("photo", message.photo[-1].file_id))

    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –∫–∞–∫ —Ç–µ–∫—Å—Ç
    if message.caption:
        homework_data["texts"].append(message.caption)

    await state.update_data(homework_data=homework_data)
    await message.answer("üì∑ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–ª–∏ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")


@router.message(HomeworkState.collecting_homework, F.document)
async def collect_homework_document(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    homework_data = data.get("homework_data", {"texts": [], "media": []})

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    homework_data["media"].append(("document", message.document.file_id))

    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –∫–∞–∫ —Ç–µ–∫—Å—Ç
    if message.caption:
        homework_data["texts"].append(message.caption)

    await state.update_data(homework_data=homework_data)
    await message.answer("üìé –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–ª–∏ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")


@router.message(HomeworkState.collecting_homework, F.video)
async def collect_homework_video(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    homework_data = data.get("homework_data", {"texts": [], "media": []})

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
    homework_data["media"].append(("video", message.video.file_id))

    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å—å –∫ –≤–∏–¥–µ–æ, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –∫–∞–∫ —Ç–µ–∫—Å—Ç
    if message.caption:
        homework_data["texts"].append(message.caption)

    await state.update_data(homework_data=homework_data)
    await message.answer("üé• –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–ª–∏ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏—Ö)
@router.callback_query(F.data.startswith("hw_header_"))
async def hw_header_handler(cb: CallbackQuery) -> None:
    await cb.answer()
