from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from sqlalchemy import select

from bot.database.session import get_session
from bot.database.models import User, UserSession
from bot.services.schedule import import_schedule_html, fetch_and_import_schedule_new


router = Router(name="schedule")


@router.message(Command("import_schedule"))
async def import_schedule_cmd(message: Message) -> None:
    if not message.reply_to_message or not message.reply_to_message.document:
        await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ HTML —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /import_schedule –Ω–∞ —ç—Ç–æ—Ç —Ñ–∞–π–ª.")
        return

    file = message.reply_to_message.document
    file_obj = await message.bot.get_file(file.file_id)
    file_path = file_obj.file_path
    file_bytes = await message.bot.download_file(file_path)
    html = file_bytes.read().decode("utf-8", errors="ignore")

    async for db in get_session():
        user = (await db.execute(select(User).where(User.telegram_id == message.from_user.id))).scalar_one_or_none()
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /login")
            return
        count = await import_schedule_html(db, user.id, html)
        await message.answer(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–Ω—è—Ç–∏–π: {count}")


def schedule_inline_keyboard(current_part: int) -> InlineKeyboardMarkup:
    # current_part: 0 = –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å (–ü–ù-–°–†), 1 = –≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å (–ß–¢-–°–ë)
    if current_part == 0:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å, –∫–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä—ë–¥" –≤–µ–¥–µ—Ç –Ω–∞ –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å
        text = "‚ñ∂Ô∏è –í–ø–µ—Ä—ë–¥"
        next_part = 1
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å, –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤–µ–¥–µ—Ç –Ω–∞ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
        text = "‚óÄÔ∏è –ù–∞–∑–∞–¥"
        next_part = 0

    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=text, callback_data=f"schedule_part_{next_part}")]]
    )


async def get_formatted_schedule(user_id: int, part: int = 0) -> str:
    from sqlalchemy import select
    from collections import defaultdict
    from tabulate import tabulate
    from bot.database.models import ScheduleLesson

    # days split
    days = ["MO", "TU", "WE"] if part == 0 else ["TH", "FR", "SA"]
    day_map = {1: "MO", 2: "TU", 3: "WE", 4: "TH", 5: "FR", 6: "SA"}

    lessons = []
    async for db in get_session():
        lessons = (
            await db.execute(
                select(ScheduleLesson)
                .where(ScheduleLesson.user_id == user_id)
            )
        ).scalars().all()

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    schedule_table = defaultdict(lambda: {day: "" for day in days})

    # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
    time_slots = set()

    for lesson in lessons:
        day_abbreviation = day_map.get(lesson.day_of_week, "")
        if day_abbreviation in days:
            time_key = f"{lesson.start_time}-{lesson.end_time}"
            time_slots.add((lesson.start_time, lesson.end_time))

            # –§–æ—ÄÔøΩÔøΩ–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–π–∫–∏: –∫–æ–¥ –∫—É—Ä—Å–∞ –∏ –∫–∞–±–∏–Ω–µ—Ç
            course_code = lesson.course_code or ""
            room = lesson.room or ""

            # –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–π–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            cell_content = f"{course_code}\n{room}" if course_code and room else (course_code or room or "")
            schedule_table[time_key][day_abbreviation] = cell_content

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
    time_slots = sorted(list(time_slots))

    if not time_slots:
        return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    headers = ["T/D"] + days
    table_data = []

    for start_time, end_time in time_slots:
        time_key = f"{start_time}-{end_time}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–Ω—è—Ç–∏—è –≤ —ç—Ç–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç
        has_lessons = any(schedule_table[time_key][day] for day in days)
        if not has_lessons:
            continue

        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã
        time_cell = f"{start_time}\n{end_time}"
        row = [time_cell] + [schedule_table[time_key][day] for day in days]
        table_data.append(row)

    if not table_data:
        return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø–æ–º–æ—â—å—é tabulate
    table_string = tabulate(table_data, headers, tablefmt="grid", colalign=("center", "center", "center", "center"))

    return table_string




@router.message(Command("schedule"))
async def schedule_handler(message: Message) -> None:
    from sqlalchemy import select
    from bot.database.models import ScheduleLesson

    async for db in get_session():
        user = (await db.execute(select(User).where(User.telegram_id == message.from_user.id))).scalar_one_or_none()

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not user:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–µ
            any_schedule = (await db.execute(select(ScheduleLesson).limit(1))).scalar_one_or_none()
            if any_schedule:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                temp_user = User(
                    telegram_id=message.from_user.id,
                    username=f"temp_user_{message.from_user.id}",
                    password="temp"
                )
                db.add(temp_user)
                await db.commit()
                await db.refresh(temp_user)
                user = temp_user
            else:
                await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /login")
                return

        text = await get_formatted_schedule(user.id, 0)
        await message.answer(f"<pre>{text}</pre>", reply_markup=schedule_inline_keyboard(0))


@router.callback_query(F.data.startswith("schedule_part_"))
async def schedule_callback_handler(callback: CallbackQuery) -> None:
    from sqlalchemy import select
    user_id = callback.from_user.id
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è
    part = int(callback.data.split("_")[2])

    async for db in get_session():
        user = (await db.execute(select(User).where(User.telegram_id == user_id))).scalar_one_or_none()
        if not user:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ /login", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω—É–∂–Ω–æ–π —á–∞—Å—Ç–∏
        text = await get_formatted_schedule(user.id, part)

        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π —á–∞—Å—Ç—å—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–Ω–æ–ø–∫–æ–π
            await callback.message.edit_text(f"<pre>{text}</pre>", reply_markup=schedule_inline_keyboard(part))
        except Exception:
            pass
        await callback.answer()



@router.message(Command("parse"))
async def parse_schedule_cmd(message: Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—ÇÔøΩÔøΩ–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å —Å–∞–π—Ç–∞ SDU"""
    async for db in get_session():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        user = (await db.execute(select(User).where(User.telegram_id == message.from_user.id))).scalar_one_or_none()
        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /login –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ)
        if not user.username or not user.password or user.username.startswith('temp_user_') or user.password == 'temp':
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö SDU.\n\n"
                "–í—ã–ø–æ–ª–Ω–∏—Ç–µ /login —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É —Å –≤–∞—à–∏–º–∏ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ SDU, "
                "–ø–æ—Å–ª–µ —á–µ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ."
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
        status_message = await message.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å —Å–∞–π—Ç–∞ SDU...")

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å username –∏ password
            count = await fetch_and_import_schedule_new(
                db=db,
                user_id=user.id,
                username=user.username,
                password=user.password
            )

            if count > 0:
                await status_message.edit_text(f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–Ω—è—Ç–∏–π: {count}")
            else:
                await status_message.edit_text("‚ö†Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ, –Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        except Exception as e:
            await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n{str(e)}")
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            import logging
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
