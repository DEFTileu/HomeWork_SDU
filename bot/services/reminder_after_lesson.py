from __future__ import annotations

from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select

from bot.config import settings
from bot.database.models import ScheduleLesson, User
from bot.database.session import get_session


def _now_local() -> datetime:
    return datetime.now(ZoneInfo(settings.TIMEZONE))


async def unified_lesson_check(bot: Bot) -> None:
    """–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–æ–º–∞—à–∫–∞—Ö + —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ª–µ–¥—É—é—â–∏—Ö —É—Ä–æ–∫–∞—Ö"""
    now = _now_local()
    day_idx = now.isoweekday()  # 1..7, our lessons use 1..6
    if day_idx > 6:  # Skip Sunday
        return

    current_minute = now.minute
    current_hour = now.hour

    # –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ XX:15
    if current_minute != 15:
        return

    async for db in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å telegram_id
        users = (await db.execute(select(User).where(User.telegram_id.is_not(None)))).scalars().all()

        for user in users:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            lessons = (
                await db.execute(
                    select(ScheduleLesson)
                    .where(
                        ScheduleLesson.user_id == user.id,
                        ScheduleLesson.day_of_week == day_idx,
                    )
                )
            ).scalars().all()

            # 1. –ü–†–û–í–ï–†–Ø–ï–ú –î–û–ú–ê–®–ù–ò–ï –ó–ê–î–ê–ù–ò–Ø (–¥–ª—è —É—Ä–æ–∫–æ–≤, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏—Ö—Å—è –≤ XX:20)
            for lesson in lessons:
                end_time = lesson.end_time  # 'HH:MM'

                try:
                    lesson_end = datetime.strptime(end_time, "%H:%M").time()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ä–æ–∫ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤ XX:20 —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
                    if lesson_end.minute == 20 and lesson_end.hour == current_hour:
                        kb = InlineKeyboardMarkup(
                            inline_keyboard=[
                                [
                                    InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"dz:{lesson.id}:yes"),
                                    InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"dz:{lesson.id}:no"),
                                ]
                            ]
                        )

                        title = lesson.course_code or lesson.title or "–£—Ä–æ–∫"
                        lesson_info = f"{title}"
                        if lesson.lesson_type:
                            lesson_info += f" ({lesson.lesson_type})"
                        if lesson.room:
                            lesson_info += f" - {lesson.room}"

                        try:
                            await bot.send_message(
                                user.telegram_id,
                                f"üéì –ó–∞–Ω—è—Ç–∏–µ '{lesson_info}' —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è (—á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç).\n\nüìù –ë—ã–ª–æ –ª–∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ?",
                                reply_markup=kb,
                            )
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –æ –¥–æ–º–∞—à–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")

                except ValueError:
                    continue

            # 2. –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø –û –°–õ–ï–î–£–Æ–©–ò–• –£–†–û–ö–ê–• (—á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç)
            next_lesson_time = (now + timedelta(minutes=15)).time()
            next_lessons = []

            for lesson in lessons:
                try:
                    lesson_start = datetime.strptime(lesson.start_time, "%H:%M").time()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —É—Ä–æ–∫ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç (¬±2 –º–∏–Ω—É—Ç—ã –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏)
                    time_diff = abs((datetime.combine(now.date(), lesson_start) -
                                   datetime.combine(now.date(), next_lesson_time)).total_seconds())

                    if time_diff <= 120:  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 2 –º–∏–Ω—É—Ç
                        next_lessons.append(lesson)

                except ValueError:
                    continue

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–ª–µ–¥—É—é—â–∏—Ö —É—Ä–æ–∫–∞—Ö
            for lesson in next_lessons:
                title = lesson.course_code or lesson.title or "–£—Ä–æ–∫"
                lesson_info = f"{title}"
                if lesson.lesson_type:
                    lesson_info += f" ({lesson.lesson_type})"
                if lesson.room:
                    lesson_info += f" - {lesson.room}"
                if lesson.teacher:
                    lesson_info += f" - {lesson.teacher}"

                try:
                    await bot.send_message(
                        user.telegram_id,
                        f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–∞–Ω—è—Ç–∏–µ\n\n"
                        f"üéì {lesson_info}\n"
                        f"‚è∞ –í—Ä–µ–º—è: {lesson.start_time}-{lesson.end_time}",
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")


# –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –¥–µ–ª–∞–µ–º –µ—ë –ø—Ä–æ—Å—Ç–æ–π –∑–∞–≥–ª—É—à–∫–æ–π
async def ask_after_lesson_job(bot: Bot) -> None:
    """–£—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —Ç–µ–ø–µ—Ä—å –≤—Å—ë –¥–µ–ª–∞–µ—Ç unified_lesson_check"""
    pass


# –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
async def check_homework_after_lesson_ends(bot: Bot) -> None:
    """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤ unified_lesson_check –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏"""
    await unified_lesson_check(bot)
