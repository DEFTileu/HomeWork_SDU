import asyncio
import logging

from aiogram import Bot, Dispatcher
from aiogram.enums.parse_mode import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç dotenv –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    # dotenv –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –≤ production (Railway –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é)
    pass

from bot.config import settings
from bot.database.session import init_models
from bot.handlers.auth import router as auth_router
from bot.handlers.common import router as common_router
from bot.handlers.homeworks import router as homeworks_router
from bot.handlers.reminders import router as reminders_router
from bot.handlers.archive import router as archive_router
from bot.handlers.schedule import router as schedule_router
from bot.handlers.admin import router as admin_router
from bot.services.scheduler import build_scheduler, setup_jobs, schedule_deadline_reminders
from bot.services.commands import set_default_commands, set_admin_commands


async def on_startup(bot: Bot) -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await init_models()

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    await set_default_commands(bot)
    await set_admin_commands(bot)

    logging.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    logging.info(f"üìä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {settings.ADMIN_IDS}")


async def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logging.basicConfig(
        level=logging.DEBUG if settings.DEBUG else logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

    token = settings.BOT_TOKEN
    if not token:
        raise RuntimeError("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher(storage=MemoryStorage())

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    dp.include_router(common_router)  # –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã (start, help)
    dp.include_router(auth_router)    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (login)
    dp.include_router(schedule_router)  # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ (schedule, parse)
    dp.include_router(homeworks_router)  # –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (homeworks)
    dp.include_router(archive_router)   # –ê—Ä—Ö–∏–≤ (archive)
    dp.include_router(reminders_router) # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    dp.include_router(admin_router)     # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã (broadcast, stats, thn)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await on_startup(bot)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
    scheduler = build_scheduler()
    setup_jobs(bot, scheduler)
    await schedule_deadline_reminders(bot, scheduler)
    scheduler.start()

    logging.info("üöÄ –ó–∞–ø—É—Å–∫ polling...")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logging.info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        scheduler.shutdown()
        logging.info("üì¥ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
